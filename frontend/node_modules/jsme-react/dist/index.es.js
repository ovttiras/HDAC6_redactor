import React from 'react';
import PropTypes from 'prop-types';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "/* add css styles here (optional) */\n\n.styles_test__32Qsm {\n  display: inline-block;\n  margin: 2em auto;\n  border: 2px solid #000;\n  font-size: 2em;\n}\n";
styleInject(css);

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
}

var jsmeIsLoaded = false;
var jsmeCallbacks = {}; // Export the setup function so that a user can override the super-lazy loading behaviour and choose to load it more eagerly.

function setup() {
  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "https://jsme.cloud.douglasconnect.com/JSME_2017-02-26/jsme/jsme.nocache.js";
  var script = document.createElement('script');
  script.src = src;
  document.head.appendChild(script);

  window.jsmeOnLoad = function () {
    Object.values(jsmeCallbacks).forEach(function (f) {
      return f();
    });
    jsmeIsLoaded = true;
  };
}
var Jsme =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(Jsme, _React$PureComponent);

  function Jsme(props) {
    var _this;

    _classCallCheck(this, Jsme);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Jsme).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleJsmeLoad", function () {
      if (_this.props.options) {
        _this.jsmeApplet = new window.JSApplet.JSME(_this.id, _this.props.width, _this.props.height, {
          options: _this.props.options
        });
      } else {
        _this.jsmeApplet = new window.JSApplet.JSME(_this.id, _this.props.width, _this.props.height);
      }

      _this.jsmeApplet.setCallBack("AfterStructureModified", _this.handleChange);

      _this.jsmeApplet.readGenericMolecularInput(_this.props.smiles);
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (jsmeEvent) {
      if (_this.props.onChange) {
        _this.props.onChange(jsmeEvent.src.smiles());
      }
    });

    _this.myRef = React.createRef();
    _this.id = "jsme" + getRandomInt(1, 100000);
    return _this;
  }

  _createClass(Jsme, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (jsmeIsLoaded) {
        this.handleJsmeLoad();
      } else {
        if (!window.jsmeOnLoad) {
          setup(this.props.src);
        }

        jsmeCallbacks[this.id] = this.handleJsmeLoad;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      jsmeCallbacks[this.id] = undefined;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.jsmeApplet !== null) {
        if (this.props.height !== prevProps.height || this.props.width !== prevProps.width) {
          this.jsmeApplet.setSize(this.props.width, this.props.height);
        }

        if (this.props.options !== prevProps.options) {
          this.jsmeApplet.options({
            options: this.props.options
          });
        }

        if (this.props.smiles !== prevProps.smiles) {
          this.jsmeApplet.readGenericMolecularInput(this.props.smiles);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        ref: this.myRef,
        id: this.id
      });
    }
  }]);

  return Jsme;
}(React.PureComponent);
Jsme.propTypes = {
  height: PropTypes.string.isRequired,
  width: PropTypes.string.isRequired,
  smiles: PropTypes.string,
  options: PropTypes.string,
  onChange: PropTypes.func,
  src: PropTypes.string
};

export { Jsme, setup };
//# sourceMappingURL=index.es.js.map
